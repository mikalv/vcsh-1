(define-package "test-filenames"
  (:uses "scheme"
         "unit-test"
         "unit-test-utils"))

(define-test filename-basename
  (check (equal? (filename-basename "") #f))
  
  (check (equal? (filename-basename "*") "*"))
  (check (equal? (filename-basename "foo/*") "*"))
  (check (equal? (filename-basename "/foo/*") "*"))

  (check (equal? (filename-basename "bar") "bar"))
  (check (equal? (filename-basename "foo/bar") "bar"))
  (check (equal? (filename-basename "/foo/bar") "bar"))

  (check (equal? (filename-basename "./bar") "bar"))
  (check (equal? (filename-basename "./foo/bar") "bar"))
  (check (equal? (filename-basename "./foo/bar") "bar"))
  
  (check (equal? (filename-basename "../bar") "bar"))
  (check (equal? (filename-basename "../foo/bar") "bar"))
  (check (equal? (filename-basename "../foo/bar") "bar"))
  
  (check (equal? (filename-basename "foo/") #f))
  (check (equal? (filename-basename "/foo/") #f))
  (check (equal? (filename-basename "./foo/") #f))
  (check (equal? (filename-basename "./foo/bar/") #f))
  (check (equal? (filename-basename "../bar/") #f))
  (check (equal? (filename-basename "../foo/bar/") #f)))

(define-test filename-extension
  (check (equal? (filename-extension "") #f))
  
  (check (equal? (filename-extension "*") ""))
  (check (equal? (filename-extension "foo/*") ""))
  (check (equal? (filename-extension "/foo/*") ""))

  (check (equal? (filename-extension "bar.baz") "baz"))
  (check (equal? (filename-extension "foo/bar.baz") "baz"))
  (check (equal? (filename-extension "/foo/bar.baz") "baz"))

  (check (equal? (filename-extension "./bar.baz") "baz"))
  (check (equal? (filename-extension "./foo/bar.baz") "baz"))
  (check (equal? (filename-extension "./foo/bar.baz") "baz"))
  
  (check (equal? (filename-extension "../bar.baz") "baz"))
  (check (equal? (filename-extension "../foo/bar.baz") "baz"))
  (check (equal? (filename-extension "../foo/bar.baz") "baz"))
  
  (check (equal? (filename-extension "foo.baz/") #f))
  (check (equal? (filename-extension "/foo.baz/") #f))
  (check (equal? (filename-extension "./foo.baz/") #f))
  (check (equal? (filename-extension "./foo/bar.baz/") #f))
  (check (equal? (filename-extension "../bar.baz/") #f))
  (check (equal? (filename-extension "../foo/bar.baz/") #f)))

(define-test filename-path
  (check (equal? (filename-path "") "./"))
  
  (check (equal? (filename-path "*") "./"))
  (check (equal? (filename-path "foo/*") "./foo/"))
  (check (equal? (filename-path "/foo/*") "/foo/"))

  (check (equal? (filename-path "bar") "./"))
  (check (equal? (filename-path "foo/bar") "./foo/"))
  (check (equal? (filename-path "/foo/bar") "/foo/"))

  (check (equal? (filename-path "./bar") "./"))
  (check (equal? (filename-path "./foo/bar") "./foo/"))

  (check (equal? (filename-path "../bar") "../"))
  (check (equal? (filename-path "../foo/bar") "../foo/"))
  (check (equal? (filename-path "../foo/bar/") "../foo/bar/"))) 
  
(define-test filename->list
  (check (runtime-error? (filename->list 123)))
  (check (runtime-error? (filename->list :sym)))
  
  (check (equal? (filename->list "") '(:relative)))
  (check (equal? (filename->list " ") '(:relative)))
  (check (equal? (filename->list "foo") '(:relative "foo")))
  (check (equal? (filename->list " foo") '(:relative "foo")))
  (check (equal? (filename->list "foo/") '(:relative "foo/")))
  (check (equal? (filename->list "foo /") '(:relative "foo /")))
  (check (equal? (filename->list "/foo") '(:absolute "foo")))
  (check (equal? (filename->list "/foo/") '(:absolute "foo/")))
  (check (equal? (filename->list "foo/bar") '(:relative "foo/" "bar")))
  (check (equal? (filename->list "foo/bar/") '(:relative "foo/" "bar/")))
  (check (equal? (filename->list "/foo/bar") '(:absolute "foo/" "bar")))
  (check (equal? (filename->list "/foo/bar/") '(:absolute "foo/" "bar/")))
  (check (equal? (filename->list "/foo/ bar/") '(:absolute "foo/" " bar/")))

  (check (equal? (filename->list "/foo/../bar/") '(:absolute "bar/")))
  (check (equal? (filename->list "foo/../bar/") '(:relative "bar/")))

  (check (equal? (filename->list "/foo/baz/../../bar/") '(:absolute "bar/")))
  (check (equal? (filename->list "foo/baz/../../bar/") '(:relative "bar/")))
  
  (check (equal? (filename->list "/foo/*/../../bar/") '(:absolute "foo/" :any-dir  :back :back "bar/")))
  (check (equal? (filename->list "foo/*/../../bar/") '(:relative "foo/" :any-dir  :back :back "bar/")))

  (check (equal? (filename->list "/foo/?/../../bar/") '(:absolute "foo/" "?/"  :back :back "bar/")))
  (check (equal? (filename->list "foo/?/../../bar/") '(:relative "foo/" "?/"  :back :back "bar/")))

  (check (equal? (filename->list "/foo/*/baz/../../bar/") '(:absolute "foo/" :any-dir :back "bar/")))
  (check (equal? (filename->list "foo/*/baz/../../bar/") '(:relative "foo/" :any-dir  :back "bar/")))

  (check (equal? (filename->list "foo/bar/baz/xyzzy/fubar/snafu/")
                 '(:relative "foo/" "bar/" "baz/" "xyzzy/" "fubar/" "snafu/")))
    (check (equal? (filename->list "/foo/bar/baz/xyzzy/fubar/snafu/")
                 '(:absolute "foo/" "bar/" "baz/" "xyzzy/" "fubar/" "snafu/")))
  (check (equal? (filename->list "/fill/*/bar/*") ' (:absolute "fill/" :any-dir "bar/" "*")))
  (check (equal? (filename->list "fill/*/bar/*") ' (:relative "fill/" :any-dir "bar/" "*")))

  (check (equal? (filename->list "**/") ' (:relative :any-dirs)))
  (check (equal? (filename->list "**") ' (:relative :any-dirs "*")))

  (check (equal? (filename->list "../**/") ' (:relative :back :any-dirs)))
  (check (equal? (filename->list "../**") ' (:relative :back :any-dirs "*")))

  (check (equal? (filename->list "/**/") ' (:absolute :any-dirs)))
  (check (equal? (filename->list "/**") ' (:absolute :any-dirs "*")))

  (check (equal? (filename->list "/**/../") ' (:absolute :any-dirs :back)))
  (check (equal? (filename->list "../**/../") ' (:relative :back :any-dirs :back)))
  
  (check (equal? (filename->list "../*") ' (:relative :back "*")))
  (check (equal? (filename->list "../../*") ' (:relative :back :back "*")))
  (check (equal? (filename->list ".././../*") ' (:relative :back :back "*")))
  (check (equal? (filename->list "./.././../*") ' (:relative :back :back "*")))
    
    
  (check (runtime-error? (filename->list "/../")))
  (check (runtime-error? (filename->list "/foo/../../")))
  (check (runtime-error? (filename->list "/../../")))
  (check (runtime-error? (filename->list "/./../"))))

(define-test is-directory-basename?
  (check (is-directory-basename? "foo/"))
  (check (is-directory-basename? :back))
  (check (is-directory-basename? :same-dir))
  (check (is-directory-basename? :any-dirs))
  (check (is-directory-basename? :absolute))
  (check (is-directory-basename? :delim))
  (check (is-directory-basename? "/"))
  (check (is-directory-basename? "."))
  (check (is-directory-basename? ".."))
  (check (is-directory-basename? "./"))
  (check (is-directory-basename? "../"))
  (check (is-directory-basename? "/../"))
  (check (is-directory-basename? "/../")))

(define-test is-directory-filename?
  (check (is-directory-filename? ""))
  (check (is-directory-filename? "foo/"))
  (check (is-directory-filename? "/"))
  (check (is-directory-filename? "."))
  (check (is-directory-filename? ".."))
  (check (is-directory-filename? "./"))
  (check (is-directory-filename? "../"))

  (check (is-directory-filename? "/foo/"))

  (check (is-directory-filename? "./../"))
  (check (is-directory-filename? "./../"))
  (check (is-directory-filename? "./foo/"))
  (check (is-directory-filename? "./../foo/"))
  (check (not (is-directory-filename? "./../foo")))
  (check (not (is-directory-filename? "./../*")))
  (check (not (is-directory-filename? "./../*.*")))
  (check (is-directory-filename? "./../**/"))
  (check (not (is-directory-filename? "./../**")))

  (check (is-directory-filename? "../"))
  (check (is-directory-filename? "../"))
  (check (is-directory-filename? "foo/"))
  (check (is-directory-filename? "../foo/"))
  (check (not (is-directory-filename? "../foo")))
  (check (not (is-directory-filename? "../*")))
  (check (not (is-directory-filename? "../*.*")))
  (check (is-directory-filename? "../**/"))
  (check (not (is-directory-filename? "../**"))))

(define-test is-file-basename?
  (check (not (is-file-basename? ".")))
  (check (not (is-file-basename? "..")))
  (check (not (is-file-basename? "./")))
  (check (not (is-file-basename? "../")))
  (check (is-file-basename? "*"))
  (check (is-file-basename? "*.*"))
  (check (is-file-basename? "foo")))

(define-test canonicalize-filename
  (check (runtime-error? (canonicalize-filename :foo)))
  (check (runtime-error? (canonicalize-filename 23)))
  
  (check (equal? (canonicalize-filename "") ""))
  (check (equal? (canonicalize-filename " ") ""))
  (check (equal? (canonicalize-filename "foo") "foo"))
  (check (equal? (canonicalize-filename " foo") "foo"))
  (check (equal? (canonicalize-filename "foo/") "foo/"))
  (check (equal? (canonicalize-filename "foo /") "foo /"))
  (check (equal? (canonicalize-filename "/foo") "/foo"))
  (check (equal? (canonicalize-filename "/foo/") "/foo/"))
  (check (equal? (canonicalize-filename "foo/bar") "foo/bar"))
  (check (equal? (canonicalize-filename "foo/bar/") "foo/bar/"))
  (check (equal? (canonicalize-filename "/foo/bar") "/foo/bar"))
  (check (equal? (canonicalize-filename "/foo/bar/") "/foo/bar/"))
  (check (equal? (canonicalize-filename "/foo/ bar/") "/foo/ bar/"))
  (check (equal? (canonicalize-filename "foo/bar/baz/xyzzy/fubar/snafu/") "foo/bar/baz/xyzzy/fubar/snafu/"))
  (check (equal? (canonicalize-filename "/foo/bar/baz/xyzzy/fubar/snafu/") "/foo/bar/baz/xyzzy/fubar/snafu/"))
  (check (equal? (canonicalize-filename "../bar/") "../bar/"))
  (check (equal? (canonicalize-filename "./bar/") "bar/"))
  (check (equal? (canonicalize-filename "foo/../bar/") "bar/"))
  (check (equal? (canonicalize-filename "foo/./bar/") "foo/bar/"))
  (check (equal? (canonicalize-filename "../") "../"))
  (check (equal? (canonicalize-filename "..//") "../"))
  (check (equal? (canonicalize-filename ".././") "../"))
  (check (equal? (canonicalize-filename "/") "/"))
  (check (equal? (canonicalize-filename "//") "/"))
  (check (equal? (canonicalize-filename "/./") "/"))
  (check (equal? (canonicalize-filename "**//") "**/"))
  (check (equal? (canonicalize-filename "**/./") "**/"))
  (check (equal? (canonicalize-filename "**/../") "**/../"))
  (check (equal? (canonicalize-filename "/**/") "/**/"))
  (check (equal? (canonicalize-filename "/**//") "/**/"))
  (check (equal? (canonicalize-filename "////") "/"))
  (check (equal? (canonicalize-filename "/**") "/**/*"))
  (check (equal? (canonicalize-filename "//**") "/**/*"))
  (check (runtime-error? (canonicalize-filename "/../"))))

(define-test list->filename
  (check (runtime-error? (list->filename 'foo)))
  (check (runtime-error? (list->filename 12)))
  (check (runtime-error? (list->filename '(12))))
  (check (runtime-error? (list->filename '(foo))))
  (check (runtime-error? (list->filename '(:crapola))))
  (check (runtime-error? (list->filename '("foo" :crapola "bar"))))
  (check (equal? (list->filename '()) ""))
  (check (equal? (list->filename '(" ")) " "))
  (check (equal? (list->filename '("foo")) "foo"))
  (check (equal? (list->filename '(" foo")) " foo"))
  (check (equal? (list->filename '("foo/")) "foo/"))
  (check (equal? (list->filename '("foo /")) "foo /"))
  (check (equal? (list->filename '(:absolute "foo")) "/foo"))
  (check (equal? (list->filename '(:absolute "foo/")) "/foo/"))
  (check (equal? (list->filename '("foo/" "bar")) "foo/bar"))
  (check (equal? (list->filename '("foo/" "bar/")) "foo/bar/"))
  (check (equal? (list->filename '(:absolute "foo/" "bar")) "/foo/bar"))
  (check (equal? (list->filename '(:absolute "foo/" "bar/")) "/foo/bar/"))
  (check (equal? (list->filename '(:absolute "foo/" " bar/")) "/foo/ bar/"))
  (check (equal? (list->filename '("foo/" "bar/" "baz/" "xyzzy/" "fubar/" "snafu/")) "foo/bar/baz/xyzzy/fubar/snafu/"))

  (check (equal? (list->filename '(:back "bar/")) "../bar/"))
  (check (equal? (list->filename '(:same-dir "bar/")) "bar/"))
  (check (equal? (list->filename '("foo/" :back "bar/")) "foo/../bar/"))
  (check (equal? (list->filename '("foo/" :same-dir "bar/")) "foo/bar/"))
  (check (equal? (list->filename '(:back)) "../"))
  (check (equal? (list->filename '(:back :delim)) "../"))
  (check (equal? (list->filename '(:back :same-dir)) "../"))
  (check (equal? (list->filename '(:absolute)) "/"))
  (check (equal? (list->filename '(:absolute :delim)) "/"))
  (check (equal? (list->filename '(:absolute :same-dir)) "/"))
  (check (equal? (list->filename '(:any-dirs :delim)) "**/"))
  (check (equal? (list->filename '(:any-dirs :same-dir)) "**/"))
  (check (equal? (list->filename '(:any-dirs :back)) "**/../"))
  (check (equal? (list->filename '(:absolute :any-dirs)) "/**/"))
  (check (equal? (list->filename '(:absolute :any-dirs :delim)) "/**/"))
  (check (equal? (list->filename '(:absolute :delim :delim :delim)) "/")))

(define-test matches-glob?
  (check (not (matches-glob? "foo" "")))
  (check (matches-glob? "foo" "*"))
  
  (check (matches-glob? "foo" "foo"))
  (check (matches-glob? "foo" "fo?"))
  (check (matches-glob? "foo" "f?o"))
  (check (matches-glob? "foo" "f??"))  
  (check (matches-glob? "foo" "?oo"))
  (check (matches-glob? "foo" "?o?"))
  (check (matches-glob? "foo" "??o"))
  (check (matches-glob? "foo" "???"))

  (check (matches-glob? "foo" "foo"))
  (check (matches-glob? "foo" "fo*"))
  (check (matches-glob? "foo" "f*o"))
  (check (matches-glob? "foo" "f**"))  
  (check (matches-glob? "foo" "*oo"))
  (check (matches-glob? "foo" "*o*"))
  (check (matches-glob? "foo" "**o"))
  (check (matches-glob? "foo" "***"))

  (check (matches-glob? "xxxxxx" "x*xx"))
  (check (matches-glob? "xxxxxxx" "x*xx"))

  (check (not (matches-glob? "foo" "FOO")))

  (check (not (matches-glob? "langtest.scm" "test*.scm")))

  (check (matches-glob? "foofoobar" "foo*bar"))
  (check (matches-glob? "foofoobar" "*foobar"))
  (check (matches-glob? "foofoobar" "*foobar*"))
  (check (matches-glob? "foofoobar" "*f*f*b*"))

  (check (matches-glob? "langtest.scm" "*.*"))
  (check (matches-glob? "langtest.scm" "*.scm"))
  (check (matches-glob? "langtest.scm" "l*.scm"))
  (check (matches-glob? "langtest.scm" "*test.scm"))
  (check (matches-glob? "langtest.scm" "?*.scm")))

(define-test path-string->list
  (check (runtime-error? (path-string->list 12)))
  (check (runtime-error? (path-string->list :symbol)))
  (check (runtime-error? (path-string->list #t)))
  (check (equal? (path-string->list "") '()))
  (check (equal? (path-string->list ".") '(".")))
  (check (equal? (path-string->list "..") '("..")))
  (check (equal? (path-string->list "..:.") '(".." ".")))
  (check (equal? (path-string->list "..;.") '(".." ".")))
  (check (equal? (path-string->list ".:..") '("." "..")))
  (check (equal? (path-string->list ".;..") '("." "..")))
  (platform-case
   ((:linux)
    ;; Quoting doesn't work on *nix platforms
    (check (equal? (path-string->list ".\\:..") '(".:..")))
    (check (equal? (path-string->list ".\\;..") '(".;.."))))
   ((:win32)
    #t))
  (check (equal? (path-string->list "1;2;3;4") '("1" "2" "3" "4")))
  (check (equal? (path-string->list "1;.;..;4") '("1" "." ".." "4")))
  (check (equal? (path-string->list "./;..;~;/usr/lib/windmill") '("./" ".." "~" "/usr/lib/windmill")))
  (check (equal? (path-string->list "./;..;~;/usr/lib/windmill") '("./" ".." "~" "/usr/lib/windmill")))
  (check (equal? (path-string->list ";2;3;4") '("2" "3" "4")))
  (check (equal? (path-string->list "1;2;;4") '("1" "2" "4")))
  (check (equal? (path-string->list "1;2;3;") '("1" "2" "3")))
  (check (equal? (path-string->list "1;;;4") '("1" "4"))))

(define-test parse-glob-pattern
  (check (equal? (scheme::parse-glob-pattern "foo") '("foo")))
  (check (equal? (scheme::parse-glob-pattern "*") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "**") '(:any-n)))

  (check (equal? (scheme::parse-glob-pattern "***") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "**?") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "*?*") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "*??") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "?**") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "?*?") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "??*") '(:any-n)))

  (check (equal? (scheme::parse-glob-pattern "????*") '(:any-n)))
  (check (equal? (scheme::parse-glob-pattern "foo????*") '("foo" :any-n)))
  (check (equal? (scheme::parse-glob-pattern "foo????*bar") '("foo" :any-n "bar")))
  (check (equal? (scheme::parse-glob-pattern "foo*?*?*?bar") '("foo" :any-n "bar")))

  (check (equal? (scheme::parse-glob-pattern "*.*") '(:any-n "." :any-n)))
  (check (equal? (scheme::parse-glob-pattern "*.txt") '(:any-n ".txt")))
  (check (equal? (scheme::parse-glob-pattern "tests.*") '("tests." :any-n)))
  (check (equal? (scheme::parse-glob-pattern "?") '(:any-1)))
  (check (equal? (scheme::parse-glob-pattern "??") '(:any-1 :any-1)))
  (check (equal? (scheme::parse-glob-pattern "???") '(:any-1 :any-1 :any-1)))
  (check (equal? (scheme::parse-glob-pattern "foo*") '("foo" :any-n)))
  (check (equal? (scheme::parse-glob-pattern "*foo") '(:any-n "foo")))
  (check (equal? (scheme::parse-glob-pattern "foo?") '("foo" :any-1)))
  (check (equal? (scheme::parse-glob-pattern "?foo") '(:any-1 "foo")))
  (check (equal? (scheme::parse-glob-pattern "foo*foo") '("foo" :any-n "foo")))
  (check (equal? (scheme::parse-glob-pattern "foo?foo") '("foo" :any-1 "foo")))
  (check (equal? (scheme::parse-glob-pattern "*foo?foo*") '(:any-n "foo" :any-1 "foo" :any-n)))
  (check (equal? (scheme::parse-glob-pattern "?bar*baz") '(:any-1 "bar" :any-n "baz"))))
