(use-package! "unit-test")

(define-test inexact->display-string/pos-pi
  (test-case (equal? "3.e0" (inexact->display-string 3.141592653589793 0 #t :none)))
  (test-case (equal? "3.e0" (inexact->display-string 3.141592653589793 0 #t :us)))
  (test-case (equal? "3,e0" (inexact->display-string 3.141592653589793 0 #t :euro)))
  (test-case (equal? "3." (inexact->display-string 3.141592653589793 0 #f :none)))
  (test-case (equal? "3." (inexact->display-string 3.141592653589793 0 #f :us)))
  (test-case (equal? "3," (inexact->display-string 3.141592653589793 0 #f :euro)))
  (test-case (equal? "3.1e0" (inexact->display-string 3.141592653589793 1 #t :none)))
  (test-case (equal? "3.1e0" (inexact->display-string 3.141592653589793 1 #t :us)))
  (test-case (equal? "3,1e0" (inexact->display-string 3.141592653589793 1 #t :euro)))
  (test-case (equal? "3.1" (inexact->display-string 3.141592653589793 1 #f :none)))
  (test-case (equal? "3.1" (inexact->display-string 3.141592653589793 1 #f :us)))
  (test-case (equal? "3,1" (inexact->display-string 3.141592653589793 1 #f :euro)))
  (test-case (equal? "3.14e0" (inexact->display-string 3.141592653589793 2 #t :none)))
  (test-case (equal? "3.14e0" (inexact->display-string 3.141592653589793 2 #t :us)))
  (test-case (equal? "3,14e0" (inexact->display-string 3.141592653589793 2 #t :euro)))
  (test-case (equal? "3.14" (inexact->display-string 3.141592653589793 2 #f :none)))
  (test-case (equal? "3.14" (inexact->display-string 3.141592653589793 2 #f :us)))
  (test-case (equal? "3,14" (inexact->display-string 3.141592653589793 2 #f :euro)))
  (test-case (equal? "3.14159e0" (inexact->display-string 3.141592653589793 5 #t :none)))
  (test-case (equal? "3.14159e0" (inexact->display-string 3.141592653589793 5 #t :us)))
  (test-case (equal? "3,14159e0" (inexact->display-string 3.141592653589793 5 #t :euro)))
  (test-case (equal? "3.14159" (inexact->display-string 3.141592653589793 5 #f :none)))
  (test-case (equal? "3.14159" (inexact->display-string 3.141592653589793 5 #f :us)))
  (test-case (equal? "3,14159" (inexact->display-string 3.141592653589793 5 #f :euro)))
  (test-case (equal? "3.1415926536e0" (inexact->display-string 3.141592653589793 10 #t :none)))
  (test-case (equal? "3.1415926536e0" (inexact->display-string 3.141592653589793 10 #t :us)))
  (test-case (equal? "3,1415926536e0" (inexact->display-string 3.141592653589793 10 #t :euro)))
  (test-case (equal? "3.1415926536" (inexact->display-string 3.141592653589793 10 #f :none)))
  (test-case (equal? "3.1415926536" (inexact->display-string 3.141592653589793 10 #f :us)))
  (test-case (equal? "3,1415926536" (inexact->display-string 3.141592653589793 10 #f :euro)))
  (test-case (equal? "3.141592653590e0" (inexact->display-string 3.141592653589793 12 #t :none)))
  (test-case (equal? "3.141592653590e0" (inexact->display-string 3.141592653589793 12 #t :us)))
  (test-case (equal? "3,141592653590e0" (inexact->display-string 3.141592653589793 12 #t :euro)))
  (test-case (equal? "3.141592653590" (inexact->display-string 3.141592653589793 12 #f :none)))
  (test-case (equal? "3.141592653590" (inexact->display-string 3.141592653589793 12 #f :us)))
  (test-case (equal? "3,141592653590" (inexact->display-string 3.141592653589793 12 #f :euro))))

(define-test inexact->display-string/neg-pi
  (test-case (equal? "-3.e0" (inexact->display-string -3.141592653589793 0 #t :none)))
  (test-case (equal? "-3.e0" (inexact->display-string -3.141592653589793 0 #t :us)))
  (test-case (equal? "-3,e0" (inexact->display-string -3.141592653589793 0 #t :euro)))
  (test-case (equal? "-3." (inexact->display-string -3.141592653589793 0 #f :none)))
  (test-case (equal? "-3." (inexact->display-string -3.141592653589793 0 #f :us)))
  (test-case (equal? "-3," (inexact->display-string -3.141592653589793 0 #f :euro)))
  (test-case (equal? "-3.1e0" (inexact->display-string -3.141592653589793 1 #t :none)))
  (test-case (equal? "-3.1e0" (inexact->display-string -3.141592653589793 1 #t :us)))
  (test-case (equal? "-3,1e0" (inexact->display-string -3.141592653589793 1 #t :euro)))
  (test-case (equal? "-3.1" (inexact->display-string -3.141592653589793 1 #f :none)))
  (test-case (equal? "-3.1" (inexact->display-string -3.141592653589793 1 #f :us)))
  (test-case (equal? "-3,1" (inexact->display-string -3.141592653589793 1 #f :euro)))
  (test-case (equal? "-3.14e0" (inexact->display-string -3.141592653589793 2 #t :none)))
  (test-case (equal? "-3.14e0" (inexact->display-string -3.141592653589793 2 #t :us)))
  (test-case (equal? "-3,14e0" (inexact->display-string -3.141592653589793 2 #t :euro)))
  (test-case (equal? "-3.14" (inexact->display-string -3.141592653589793 2 #f :none)))
  (test-case (equal? "-3.14" (inexact->display-string -3.141592653589793 2 #f :us)))
  (test-case (equal? "-3,14" (inexact->display-string -3.141592653589793 2 #f :euro)))
  (test-case (equal? "-3.14159e0" (inexact->display-string -3.141592653589793 5 #t :none)))
  (test-case (equal? "-3.14159e0" (inexact->display-string -3.141592653589793 5 #t :us)))
  (test-case (equal? "-3,14159e0" (inexact->display-string -3.141592653589793 5 #t :euro)))
  (test-case (equal? "-3.14159" (inexact->display-string -3.141592653589793 5 #f :none)))
  (test-case (equal? "-3.14159" (inexact->display-string -3.141592653589793 5 #f :us)))
  (test-case (equal? "-3,14159" (inexact->display-string -3.141592653589793 5 #f :euro)))
  (test-case (equal? "-3.1415926536e0" (inexact->display-string -3.141592653589793 10 #t :none)))
  (test-case (equal? "-3.1415926536e0" (inexact->display-string -3.141592653589793 10 #t :us)))
  (test-case (equal? "-3,1415926536e0" (inexact->display-string -3.141592653589793 10 #t :euro)))
  (test-case (equal? "-3.1415926536" (inexact->display-string -3.141592653589793 10 #f :none)))
  (test-case (equal? "-3.1415926536" (inexact->display-string -3.141592653589793 10 #f :us)))
  (test-case (equal? "-3,1415926536" (inexact->display-string -3.141592653589793 10 #f :euro)))
  (test-case (equal? "-3.141592653590e0" (inexact->display-string -3.141592653589793 12 #t :none)))
  (test-case (equal? "-3.141592653590e0" (inexact->display-string -3.141592653589793 12 #t :us)))
  (test-case (equal? "-3,141592653590e0" (inexact->display-string -3.141592653589793 12 #t :euro)))
  (test-case (equal? "-3.141592653590" (inexact->display-string -3.141592653589793 12 #f :none)))
  (test-case (equal? "-3.141592653590" (inexact->display-string -3.141592653589793 12 #f :us)))
  (test-case (equal? "-3,141592653590" (inexact->display-string -3.141592653589793 12 #f :euro))))

(define-test inexact->display-string/zero
  (test-case (equal? "0.e0" (inexact->display-string 0 0 #t :none)))
  (test-case (equal? "0.e0" (inexact->display-string 0 0 #t :us)))
  (test-case (equal? "0,e0" (inexact->display-string 0 0 #t :euro)))
  (test-case (equal? "0." (inexact->display-string 0 0 #f :none)))
  (test-case (equal? "0." (inexact->display-string 0 0 #f :us)))
  (test-case (equal? "0," (inexact->display-string 0 0 #f :euro)))
  (test-case (equal? "0.0e0" (inexact->display-string 0 1 #t :none)))
  (test-case (equal? "0.0e0" (inexact->display-string 0 1 #t :us)))
  (test-case (equal? "0,0e0" (inexact->display-string 0 1 #t :euro)))
  (test-case (equal? "0.0" (inexact->display-string 0 1 #f :none)))
  (test-case (equal? "0.0" (inexact->display-string 0 1 #f :us)))
  (test-case (equal? "0,0" (inexact->display-string 0 1 #f :euro)))
  (test-case (equal? "0.00e0" (inexact->display-string 0 2 #t :none)))
  (test-case (equal? "0.00e0" (inexact->display-string 0 2 #t :us)))
  (test-case (equal? "0,00e0" (inexact->display-string 0 2 #t :euro)))
  (test-case (equal? "0.00" (inexact->display-string 0 2 #f :none)))
  (test-case (equal? "0.00" (inexact->display-string 0 2 #f :us)))
  (test-case (equal? "0,00" (inexact->display-string 0 2 #f :euro)))
  (test-case (equal? "0.00000e0" (inexact->display-string 0 5 #t :none)))
  (test-case (equal? "0.00000e0" (inexact->display-string 0 5 #t :us)))
  (test-case (equal? "0,00000e0" (inexact->display-string 0 5 #t :euro)))
  (test-case (equal? "0.00000" (inexact->display-string 0 5 #f :none)))
  (test-case (equal? "0.00000" (inexact->display-string 0 5 #f :us)))
  (test-case (equal? "0,00000" (inexact->display-string 0 5 #f :euro)))
  (test-case (equal? "0.0000000000e0" (inexact->display-string 0 10 #t :none)))
  (test-case (equal? "0.0000000000e0" (inexact->display-string 0 10 #t :us)))
  (test-case (equal? "0,0000000000e0" (inexact->display-string 0 10 #t :euro)))
  (test-case (equal? "0.0000000000" (inexact->display-string 0 10 #f :none)))
  (test-case (equal? "0.0000000000" (inexact->display-string 0 10 #f :us)))
  (test-case (equal? "0,0000000000" (inexact->display-string 0 10 #f :euro)))
  (test-case (equal? "0.000000000000e0" (inexact->display-string 0 12 #t :none)))
  (test-case (equal? "0.000000000000e0" (inexact->display-string 0 12 #t :us)))
  (test-case (equal? "0,000000000000e0" (inexact->display-string 0 12 #t :euro)))
  (test-case (equal? "0.000000000000" (inexact->display-string 0 12 #f :none)))
  (test-case (equal? "0.000000000000" (inexact->display-string 0 12 #f :us)))
  (test-case (equal? "0,000000000000" (inexact->display-string 0 12 #f :euro))))

(define-test inexact->display-string/nan
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 0 #f :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 1 #f :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 2 #f :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 5 #f :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 10 #f :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #t :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #t :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #t :euro)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #f :none)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #f :us)))
  (test-case (equal? "<not-a-number>" (inexact->display-string #inan 12 #f :euro))))

(define-test inexact->display-string/pos-inf
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 0 #f :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 1 #f :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 2 #f :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 5 #f :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 10 #f :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #t :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #t :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #t :euro)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #f :none)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #f :us)))
  (test-case (equal? "<positive-infinity>" (inexact->display-string #iposinf 12 #f :euro))))

(define-test inexact->display-string/neg-inf
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 0 #f :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 1 #f :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 2 #f :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 5 #f :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 10 #f :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #t :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #t :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #t :euro)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #f :none)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #f :us)))
  (test-case (equal? "<negative-infinity>" (inexact->display-string #ineginf 12 #f :euro))))

(define-test inexact->display-string/jenny
  (test-case (equal? "8.e6" (inexact->display-string 8675309 0 #t :none)))
  (test-case (equal? "8.e6" (inexact->display-string 8675309 0 #t :us)))
  (test-case (equal? "8,e6" (inexact->display-string 8675309 0 #t :euro)))
  (test-case (equal? "8675309." (inexact->display-string 8675309 0 #f :none)))
  (test-case (equal? "8,675,309." (inexact->display-string 8675309 0 #f :us)))
  (test-case (equal? "8.675.309," (inexact->display-string 8675309 0 #f :euro)))
  (test-case (equal? "8.6e6" (inexact->display-string 8675309 1 #t :none)))
  (test-case (equal? "8.6e6" (inexact->display-string 8675309 1 #t :us)))
  (test-case (equal? "8,6e6" (inexact->display-string 8675309 1 #t :euro)))
  (test-case (equal? "8675309.0" (inexact->display-string 8675309 1 #f :none)))
  (test-case (equal? "8,675,309.0" (inexact->display-string 8675309 1 #f :us)))
  (test-case (equal? "8.675.309,0" (inexact->display-string 8675309 1 #f :euro)))
  (test-case (equal? "8.67e6" (inexact->display-string 8675309 2 #t :none)))
  (test-case (equal? "8.67e6" (inexact->display-string 8675309 2 #t :us)))
  (test-case (equal? "8,67e6" (inexact->display-string 8675309 2 #t :euro)))
  (test-case (equal? "8675309.00" (inexact->display-string 8675309 2 #f :none)))
  (test-case (equal? "8,675,309.00" (inexact->display-string 8675309 2 #f :us)))
  (test-case (equal? "8.675.309,00" (inexact->display-string 8675309 2 #f :euro)))
  (test-case (equal? "8.67530e6" (inexact->display-string 8675309 5 #t :none)))
  (test-case (equal? "8.67530e6" (inexact->display-string 8675309 5 #t :us)))
  (test-case (equal? "8,67530e6" (inexact->display-string 8675309 5 #t :euro)))
  (test-case (equal? "8675309.00000" (inexact->display-string 8675309 5 #f :none)))
  (test-case (equal? "8,675,309.00000" (inexact->display-string 8675309 5 #f :us)))
  (test-case (equal? "8.675.309,00000" (inexact->display-string 8675309 5 #f :euro)))
  (test-case (equal? "8.6753090000e6" (inexact->display-string 8675309 10 #t :none)))
  (test-case (equal? "8.6753090000e6" (inexact->display-string 8675309 10 #t :us)))
  (test-case (equal? "8,6753090000e6" (inexact->display-string 8675309 10 #t :euro)))
  (test-case (equal? "8675309.000000000?" (inexact->display-string 8675309 10 #f :none)))
  (test-case (equal? "8,675,309.000000000?" (inexact->display-string 8675309 10 #f :us)))
  (test-case (equal? "8.675.309,000000000?" (inexact->display-string 8675309 10 #f :euro)))
  (test-case (equal? "8.675309000000e6" (inexact->display-string 8675309 12 #t :none)))
  (test-case (equal? "8.675309000000e6" (inexact->display-string 8675309 12 #t :us)))
  (test-case (equal? "8,675309000000e6" (inexact->display-string 8675309 12 #t :euro)))
  (test-case (equal? "8675309.000000000???" (inexact->display-string 8675309 12 #f :none)))
  (test-case (equal? "8,675,309.000000000???" (inexact->display-string 8675309 12 #f :us)))
  (test-case (equal? "8.675.309,000000000???" (inexact->display-string 8675309 12 #f :euro))))


(define-test inexact->display-string/497*
  (test-case (equal? "4.e2" (inexact->display-string 497.551199999999994 0 #t :none)))
  (test-case (equal? "4.e2" (inexact->display-string 497.551199999999994 0 #t :us)))
  (test-case (equal? "4,e2" (inexact->display-string 497.551199999999994 0 #t :euro)))
  (test-case (equal? "498." (inexact->display-string 497.551199999999994 0 #f :none)))
  (test-case (equal? "498." (inexact->display-string 497.551199999999994 0 #f :us)))
  (test-case (equal? "498," (inexact->display-string 497.551199999999994 0 #f :euro)))
  (test-case (equal? "4.9e2" (inexact->display-string 497.551199999999994 1 #t :none)))
  (test-case (equal? "4.9e2" (inexact->display-string 497.551199999999994 1 #t :us)))
  (test-case (equal? "4,9e2" (inexact->display-string 497.551199999999994 1 #t :euro)))
  (test-case (equal? "497.6" (inexact->display-string 497.551199999999994 1 #f :none)))
  (test-case (equal? "497.6" (inexact->display-string 497.551199999999994 1 #f :us)))
  (test-case (equal? "497,6" (inexact->display-string 497.551199999999994 1 #f :euro)))
  (test-case (equal? "4.97e2" (inexact->display-string 497.551199999999994 2 #t :none)))
  (test-case (equal? "4.97e2" (inexact->display-string 497.551199999999994 2 #t :us)))
  (test-case (equal? "4,97e2" (inexact->display-string 497.551199999999994 2 #t :euro)))
  (test-case (equal? "497.55" (inexact->display-string 497.551199999999994 2 #f :none)))
  (test-case (equal? "497.55" (inexact->display-string 497.551199999999994 2 #f :us)))
  (test-case (equal? "497,55" (inexact->display-string 497.551199999999994 2 #f :euro)))
  (test-case (equal? "4.97551e2" (inexact->display-string 497.551199999999994 5 #t :none)))
  (test-case (equal? "4.97551e2" (inexact->display-string 497.551199999999994 5 #t :us)))
  (test-case (equal? "4,97551e2" (inexact->display-string 497.551199999999994 5 #t :euro)))
  (test-case (equal? "497.55120" (inexact->display-string 497.551199999999994 5 #f :none)))
  (test-case (equal? "497.55120" (inexact->display-string 497.551199999999994 5 #f :us)))
  (test-case (equal? "497,55120" (inexact->display-string 497.551199999999994 5 #f :euro)))
  (test-case (equal? "4.9755120000e2" (inexact->display-string 497.551199999999994 10 #t :none)))
  (test-case (equal? "4.9755120000e2" (inexact->display-string 497.551199999999994 10 #t :us)))
  (test-case (equal? "4,9755120000e2" (inexact->display-string 497.551199999999994 10 #t :euro)))
  (test-case (equal? "497.5512000000" (inexact->display-string 497.551199999999994 10 #f :none)))
  (test-case (equal? "497.5512000000" (inexact->display-string 497.551199999999994 10 #f :us)))
  (test-case (equal? "497,5512000000" (inexact->display-string 497.551199999999994 10 #f :euro)))
  (test-case (equal? "4.975512000000e2" (inexact->display-string 497.551199999999994 12 #t :none)))
  (test-case (equal? "4.975512000000e2" (inexact->display-string 497.551199999999994 12 #t :us)))
  (test-case (equal? "4,975512000000e2" (inexact->display-string 497.551199999999994 12 #t :euro)))
  (test-case (equal? "497.551200000000" (inexact->display-string 497.551199999999994 12 #f :none)))
  (test-case (equal? "497.551200000000" (inexact->display-string 497.551199999999994 12 #f :us)))
  (test-case (equal? "497,551200000000" (inexact->display-string 497.551199999999994 12 #f :euro))))

(define-test inexact->display-string/98421
  (test-case (equal? "9.e4" (inexact->display-string 98421.300000000002910 0 #t :none)))
  (test-case (equal? "9.e4" (inexact->display-string 98421.300000000002910 0 #t :us)))
  (test-case (equal? "9,e4" (inexact->display-string 98421.300000000002910 0 #t :euro)))
  (test-case (equal? "98421." (inexact->display-string 98421.300000000002910 0 #f :none)))
  (test-case (equal? "98,421." (inexact->display-string 98421.300000000002910 0 #f :us)))
  (test-case (equal? "98.421," (inexact->display-string 98421.300000000002910 0 #f :euro)))
  (test-case (equal? "9.8e4" (inexact->display-string 98421.300000000002910 1 #t :none)))
  (test-case (equal? "9.8e4" (inexact->display-string 98421.300000000002910 1 #t :us)))
  (test-case (equal? "9,8e4" (inexact->display-string 98421.300000000002910 1 #t :euro)))
  (test-case (equal? "98421.3" (inexact->display-string 98421.300000000002910 1 #f :none)))
  (test-case (equal? "98,421.3" (inexact->display-string 98421.300000000002910 1 #f :us)))
  (test-case (equal? "98.421,3" (inexact->display-string 98421.300000000002910 1 #f :euro)))
  (test-case (equal? "9.84e4" (inexact->display-string 98421.300000000002910 2 #t :none)))
  (test-case (equal? "9.84e4" (inexact->display-string 98421.300000000002910 2 #t :us)))
  (test-case (equal? "9,84e4" (inexact->display-string 98421.300000000002910 2 #t :euro)))
  (test-case (equal? "98421.30" (inexact->display-string 98421.300000000002910 2 #f :none)))
  (test-case (equal? "98,421.30" (inexact->display-string 98421.300000000002910 2 #f :us)))
  (test-case (equal? "98.421,30" (inexact->display-string 98421.300000000002910 2 #f :euro)))
  (test-case (equal? "9.84213e4" (inexact->display-string 98421.300000000002910 5 #t :none)))
  (test-case (equal? "9.84213e4" (inexact->display-string 98421.300000000002910 5 #t :us)))
  (test-case (equal? "9,84213e4" (inexact->display-string 98421.300000000002910 5 #t :euro)))
  (test-case (equal? "98421.30000" (inexact->display-string 98421.300000000002910 5 #f :none)))
  (test-case (equal? "98,421.30000" (inexact->display-string 98421.300000000002910 5 #f :us)))
  (test-case (equal? "98.421,30000" (inexact->display-string 98421.300000000002910 5 #f :euro)))
  (test-case (equal? "9.8421300000e4" (inexact->display-string 98421.300000000002910 10 #t :none)))
  (test-case (equal? "9.8421300000e4" (inexact->display-string 98421.300000000002910 10 #t :us)))
  (test-case (equal? "9,8421300000e4" (inexact->display-string 98421.300000000002910 10 #t :euro)))
  (test-case (equal? "98421.3000000000" (inexact->display-string 98421.300000000002910 10 #f :none)))
  (test-case (equal? "98,421.3000000000" (inexact->display-string 98421.300000000002910 10 #f :us)))
  (test-case (equal? "98.421,3000000000" (inexact->display-string 98421.300000000002910 10 #f :euro)))
  (test-case (equal? "9.842130000000e4" (inexact->display-string 98421.300000000002910 12 #t :none)))
  (test-case (equal? "9.842130000000e4" (inexact->display-string 98421.300000000002910 12 #t :us)))
  (test-case (equal? "9,842130000000e4" (inexact->display-string 98421.300000000002910 12 #t :euro))))
