(use-package! "unit-test")

(define-test number-type-predicates
  (test-case (integer? 0))
  (test-case (integer? 1))
  (test-case (integer? 100))
  (test-case (rational? 0))
  (test-case (rational? 1))
  (test-case (rational? 100))
  (test-case (real? 0))
  (test-case (real? 1))
  (test-case (real? 100))
  (test-case (not (complex? 0)))
  (test-case (not (complex? 1)))
  (test-case (not (complex? 100)))
  (test-case (number? 0))
  (test-case (number? 1))
  (test-case (number? 100))
  (test-case (not (integer? 0.0)))
  (test-case (not (integer? 1.0)))
  (test-case (not (integer? 100.0)))
  (test-case (not (rational? 0.0)))
  (test-case (not (rational? 1.0)))
  (test-case (not (rational? 100.0)))
  (test-case (real? 0.0))
  (test-case (real? 1.0))
  (test-case (real? 100.0))
  (test-case (not (complex? :not-complex)))
  (test-case (not (complex? 0.0)))
  (test-case (not (complex? 1.0)))
  (test-case (not (complex? 100.0)))
  (test-case (not (number? :foo)))
  (test-case (number? 0.0))
  (test-case (number? 1.0))
  (test-case (number? 100.0))
  (test-case (complex? 1+2i))
  (test-case (complex? 1-2i))
  (test-case (complex? -1+2i))
  (test-case (complex? -1-2i))
  (test-case (not (real? 1+2i)))
  (test-case (not (real? 1-2i)))
  (test-case (not (real? -1+2i)))
  (test-case (not (real? -1-2i))))


