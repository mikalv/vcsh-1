(use-package! "unit-test")

(define-test numeric-equality
  (check (= 1))
  (check (= 1.0))

  (check (= 1 1))
  (check (not (= 1 2)))
  (check (= 1.0 1.0))
  (check (not (= 1.0 2.0)))
  (check (= 1 1.0))
  (check (not (= 1 2.0)))
  (check (= 1.0 1))
  (check (not (= 1.0 2)))

  (check (= 1 1 1))
  (check (not (= 2 1 1)))
  (check (not (= 1 2 1)))
  (check (not (= 1 1 2)))
  (check (= 1.0 1.0 1.0))
  (check (not (= 2.0 1.0 1.0)))
  (check (not (= 1.0 2.0 1.0)))
  (check (not (= 1.0 1.0 2.0)))
  (check (= 1.0 1 1.0))
  (check (not (= 2.0 1 1.0)))
  (check (not (= 1.0 2 1.0)))
  (check (not (= 1.0 1 2.0)))
  (check (= 1 1.0 1.0))
  (check (not (= 2 1.0 1.0)))
  (check (not (= 1 2.0 1.0)))
  (check (not (= 1 1.0 2.0)))

  (check (= 1 1 1 1))
  (check (not (= 2 1 1 1)))
  (check (not (= 1 2 1 1)))
  (check (not (= 1 1 2 1)))
  (check (not (= 1 1 2 2)))

  (check (eqv? 1 1))
  (check (eqv? 1.0 1.0))
  (check (not (eqv? 1 2)))
  (check (not (eqv? 1.0 2.0)))
  (check (not (eqv? 1.0 1)))
  (check (not (eqv? 1 1.0)))
  (check (not (eqv? 1.0 2)))
  (check (not (eqv? 1 2.0)))

  (check (equal? 1 1))
  (check (equal? 1.0 1.0))
  (check (not (equal? 1 2)))
  (check (not (equal? 2 1)))
  (check (not (equal? 1.0 2.0)))
  (check (not (equal? 2.0 1.0)))
  (check (not (equal? 1 1.0)))
  (check (not (equal? 1.0 1)))
  (check (not (equal? 2 1.0)))
  (check (not (equal? 1.0 2)))

  (check (= #iposinf #iposinf))
  (check (= #ineginf #ineginf))

  (check (not (= #inan #inan)))
  (check (not (= #iposinf #ineginf)))
  (check (not (= #ineginf #iposinf)))
  (check (not (= #iposinf #inan)))
  (check (not (= #ineginf #inan)))
  (check (not (= #inan #ineginf)))
  (check (not (= #inan #iposinf)))

  (check (equal? #iposinf #iposinf))
  (check (equal? #ineginf #ineginf))
  (check (equal? #inan #inan))
  (check (not (equal? #iposinf #ineginf)))
  (check (not (equal? #ineginf #iposinf)))

  (check (not (equal? #iposinf #inan)))
  (check (not (equal? #ineginf #inan)))
  (check (not (equal? #inan #ineginf)))
  (check (not (equal? #inan #iposinf))))
