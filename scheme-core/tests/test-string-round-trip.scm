(use-package! "unit-test")

(define (make-all-byte-string)
  (let ((p (open-output-string)))
    (set-port-translate-mode! p #f)
    (dotimes (ii 256)
      (display (integer->char ii) p))
    (get-output-string p)))

(define (make-all-byte-combo-string)
  (let ((p (open-output-string)))
    (set-port-translate-mode! p #f)
    (dotimes (ii 256)
      (dotimes (jj 256)
        (display (integer->char ii) p)
        (display (integer->char jj) p)))
    (get-output-string p)))

(define-test string-round-trip
  (dotimes (n 256)
    (test-case (can-read/write-round-trip? (make-string 1 (integer->char n)))))
  (dotimes (n 256)
    (test-case (can-read/write-round-trip? (make-string 3 (integer->char n)))))
  (let ((ab-str (make-all-byte-string))
        (abc-str (make-all-byte-combo-string)))
    (test-case (can-read/write-round-trip? "\t\n"))
    (test-case (can-read/write-round-trip? " \n hello\n\t"))
    (test-case (can-read/write-round-trip? "\"\"\""))
    (test-case (can-read/write-round-trip? "01234567890abcdefghihjkilmnopqrstuvwxyz"))
    (test-case (can-read/write-round-trip? ab-str))
    (test-case (can-read/write-round-trip? abc-str))
    (test-case (= (length abc-str) (* 256 256 2)))))


(define string-escapes/reader
  (test-case (= 0  (char->integer (string-ref "\000" 0))))
  (test-case (= 1  (char->integer (string-ref "\1" 0))))
  (test-case (= 2  (char->integer (string-ref "\2" 0))))
  (test-case (= 3  (char->integer (string-ref "\3" 0))))
  (test-case (= 4  (char->integer (string-ref "\4" 0))))
  (test-case (= 5  (char->integer (string-ref "\5" 0))))
  (test-case (= 6  (char->integer (string-ref "\6" 0))))
  (test-case (= 7  (char->integer (string-ref "\7" 0))))
  (test-case (= 8  (char->integer (string-ref "\10" 0))))
  (test-case (= 9  (char->integer (string-ref "\11" 0))))
  (test-case (= 10 (char->integer (string-ref "\12" 0))))
  (test-case (= 11 (char->integer (string-ref "\13" 0))))
  (test-case (= 12 (char->integer (string-ref "\14" 0))))
  (test-case (= 13 (char->integer (string-ref "\15" 0))))
  (test-case (= 14 (char->integer (string-ref "\16" 0))))
  (test-case (= 15 (char->integer (string-ref "\17" 0))))
  (test-case (= 16 (char->integer (string-ref "\20" 0))))
  (test-case (= 17 (char->integer (string-ref "\21" 0))))
  (test-case (= 18 (char->integer (string-ref "\22" 0))))
  (test-case (= 19 (char->integer (string-ref "\23" 0))))

  (test-case (= 1  (char->integer (string-ref "\19" 0))))
  (test-case (= #\9 (string-ref "\19" 1))))

(define-test string-escapes

  (test-case (equal? (write-to-string (make-string 1 (integer->char 0  ))) "\"\\000\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 1  ))) "\"\\001\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 2  ))) "\"\\002\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 3  ))) "\"\\003\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 4  ))) "\"\\004\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 5  ))) "\"\\005\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 6  ))) "\"\\006\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 7  ))) "\"\\007\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 8  ))) "\"\\010\""))

  (test-case (equal? (write-to-string (make-string 1 #\\               ))  "\"\\\\\""))
  (test-case (equal? (write-to-string (make-string 1 #\"               ))  "\"\\\"\""))
  (test-case (equal? (write-to-string (make-string 1 #\newline         ))  "\"\\n\"" ))
  (test-case (equal? (write-to-string (make-string 1 #\cr              ))  "\"\\r\"" ))
  (test-case (equal? (write-to-string (make-string 1 #\tab             ))  "\"\\t\"" ))

  (test-case (equal? (write-to-string (make-string 1 (integer->char 128))) "\"\\200\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 129))) "\"\\201\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 130))) "\"\\202\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 131))) "\"\\203\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 132))) "\"\\204\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 133))) "\"\\205\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 134))) "\"\\206\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 135))) "\"\\207\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 136))) "\"\\210\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 192))) "\"\\300\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 193))) "\"\\301\""))
  (test-case (equal? (write-to-string (make-string 1 (integer->char 255))) "\"\\377\""))
  )

