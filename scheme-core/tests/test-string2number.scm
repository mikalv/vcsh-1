(use-package! "unit-test")

(define-test string->number
  (test-case (runtime-error? (string->number 123 12)))
  (test-case (runtime-error? (string->number "123" 1)))
  (test-case (runtime-error? (string->number "123" -1)))
  (test-case (runtime-error? (string->number "123" 37)))
  (test-case (runtime-error? (string->number "123" 3.7)))
  (test-case (runtime-error? (string->number "123" :keyword)))
    
  (test-case (equal? #f (string->number "")))
  (test-case (equal? #f (string->number "" 2)))
  (test-case (equal? #f (string->number "" 8)))
  (test-case (equal? #f (string->number "" 10)))
  (test-case (equal? #f (string->number "" 16)))

  (test-case (equal? 0 (string->number "0")))
  (test-case (equal? 0 (string->number "-0")))
  (test-case (equal? 12 (string->number "12")))
  (test-case (equal? -12 (string->number "-12")))

  (test-case (equal? -1.2 (string->number "-1.2")))  

  (test-case (equal? 0 (string->number "0" 10)))
  (test-case (equal? 0 (string->number "-0" 10)))
  (test-case (equal? 12 (string->number "12" 10)))
  (test-case (equal? -12 (string->number "-12" 10)))
  (test-case (equal? #f (string->number "12f" 10)))
  (test-case (equal? #f (string->number "-12f" 10)))
  (test-case (equal? #f (string->number "-12g" 10)))
  (test-case (equal? #f (string->number "12-2" 10)))
  (test-case (equal? #f (string->number "12+2" 10)))
  (test-case (equal? #f (string->number "12i" 10)))
  
  (test-case (equal? 0 (string->number "0" 16)))
  (test-case (equal? 0 (string->number "-0" 16)))
  (test-case (equal? 18 (string->number "12" 16)))
  (test-case (equal? #f (string->number "1.2" 16)))
  (test-case (equal? -18 (string->number "-12" 16)))
  (test-case (equal? 51966 (string->number "cafe" 16)))
  (test-case (equal? -51966 (string->number "-cafe" 16)))
  (test-case (equal? 51966 (string->number "CAFE" 16)))
  (test-case (equal? #f (string->number "CA.FE" 16)))
  (test-case (equal? -51966 (string->number "-CAFE" 16)))

  (test-case (equal? 0 (string->number "0" 8)))
  (test-case (equal? 0 (string->number "-0" 8)))
  (test-case (equal? 10 (string->number "12" 8)))
  (test-case (equal? -10 (string->number "-12" 8)))
  (test-case (equal? #f (string->number "8" 8)))
  (test-case (equal? #f (string->number "9" 8)))
  (test-case (equal? #f (string->number "18" 8)))
  (test-case (equal? #f (string->number "19" 8)))
  (test-case (equal? #f (string->number "12f" 8)))
  (test-case (equal? #f (string->number "-12f" 8)))
  (test-case (equal? #f (string->number "-12g" 8)))
  (test-case (equal? #f (string->number "12-2" 8)))
  (test-case (equal? #f (string->number "12+2" 8)))
  (test-case (equal? #f (string->number "12i" 8)))

  (test-case (equal? 0 (string->number "0" 2)))
  (test-case (equal? 0 (string->number "-0" 2)))
  (test-case (equal? 12 (string->number "1100" 2)))
  (test-case (equal? -12 (string->number "-1100" 2)))

  (test-case (equal? #f (string->number "8" 2)))
  (test-case (equal? #f (string->number "9" 2)))
  (test-case (equal? #f (string->number "18" 2)))
  (test-case (equal? #f (string->number "19" 2)))
  (test-case (equal? #f (string->number "12f" 2)))
  (test-case (equal? #f (string->number "-12f" 2)))
  (test-case (equal? #f (string->number "-12g" 2)))
  (test-case (equal? #f (string->number "12-2" 2)))
  (test-case (equal? #f (string->number "12+2" 2)))
  (test-case (equal? #f (string->number "12i" 2)))
  
  )
