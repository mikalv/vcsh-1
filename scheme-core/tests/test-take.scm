(use-package! "unit-test")

(define-test take
  (check (equal? (take () 0) ()))
  (check (runtime-error? (take :foo 1)))
  (check (not (runtime-error? (take :foo 0))))
  (check (runtime-error? (take '() #\a)))
  (check (runtime-error? (take '(1 2 3) #\a)))
  
  (let ((xs `(1 2 3 4 5)))
    (check (equal? (take xs 0) '()))
    (check (not (eq? (take xs 0) xs)))
    (check (equal? (take xs 1) '(1)))
    (check (not (eq? (take xs 1) xs)))
    (check (equal? (take xs 2) '(1 2)))
    (check (not (eq? (take xs 2) xs)))
    (check (equal? (take xs 5) '(1 2 3 4 5)))
    (check (not (eq? (take xs 5) xs)))
    (check (runtime-error? (take xs 6))))

  (let ((xs `(1 2 3 4 . 5)))
    (check (equal? (take xs 0) '()))
    (check (not (eq? (take xs 0) xs)))
    (check (equal? (take xs 1) '(1)))
    (check (not (eq? (take xs 1) xs)))
    (check (equal? (take xs 2) '(1 2)))
    (check (not (eq? (take xs 2) xs)))
    (check (equal? (take xs 4) '(1 2 3 4)))
    (check (not (eq? (take xs 4) xs)))
    (check (runtime-error? (take xs 5)))))
