(use-package! "unit-test")

(define-test take
  (test-case (equal? (take () 0) ()))
  (test-case (runtime-error? (take :foo 1)))
  (test-case (not (runtime-error? (take :foo 0))))
  (test-case (runtime-error? (take '() #\a)))
  (test-case (runtime-error? (take '(1 2 3) #\a)))
  
  (let ((xs `(1 2 3 4 5)))
    (test-case (equal? (take xs 0) '()))
    (test-case (not (eq? (take xs 0) xs)))
    (test-case (equal? (take xs 1) '(1)))
    (test-case (not (eq? (take xs 1) xs)))
    (test-case (equal? (take xs 2) '(1 2)))
    (test-case (not (eq? (take xs 2) xs)))
    (test-case (equal? (take xs 5) '(1 2 3 4 5)))
    (test-case (not (eq? (take xs 5) xs)))
    (test-case (runtime-error? (take xs 6))))

  (let ((xs `(1 2 3 4 . 5)))
    (test-case (equal? (take xs 0) '()))
    (test-case (not (eq? (take xs 0) xs)))
    (test-case (equal? (take xs 1) '(1)))
    (test-case (not (eq? (take xs 1) xs)))
    (test-case (equal? (take xs 2) '(1 2)))
    (test-case (not (eq? (take xs 2) xs)))
    (test-case (equal? (take xs 4) '(1 2 3 4)))
    (test-case (not (eq? (take xs 4) xs)))
    (test-case (runtime-error? (take xs 5)))))
