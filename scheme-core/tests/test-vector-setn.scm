(use-package! "unit-test")

(define-test vector-set!
  (let ((a (vector :a :b :c :d :e)))
    (check (runtime-error? (vector-set! '(1 2 3 4) 2 :foo)))
    (check (runtime-error? (vector-set! a 'sym :foo)))
    (check (runtime-error? (vector-set! a -1 :foo)))
    (check (runtime-error? (vector-set! a 5 :foo)))
    (check (runtime-error? (vector-set! a -1.0 :foo)))
    (check (runtime-error? (vector-set! a 5.0 :foo)))
    (check (equal? [:a :b :c :d :e] a)) ; None of the sets should've been destructive...
    (check (not (runtime-error? (vector-set! a 0 :a-0))))
    (check (eq? :a-0 (vector-ref a 0)))
    (check (not (runtime-error? (vector-set! a 1 :b-0))))
    (check (eq? :b-0 (vector-ref a 1)))
    (check (not (runtime-error? (vector-set! a 2 :c-0))))
    (check (eq? :c-0 (vector-ref a 2)))
    (check (not (runtime-error? (vector-set! a 3 :d-0))))
    (check (eq? :d-0 (vector-ref a 3)))
    (check (not (runtime-error? (vector-set! a 4 :e-0))))
    (check (eq? :e-0 (vector-ref a 4)))
    (check (equal? [:a-0 :b-0 :c-0 :d-0 :e-0] a))
    (check (eq? a (vector-set! a 0 0)))
    (check (not (runtime-error? (vector-set! a 0.0 :a-1))))
    (check (eq? :a-1 (vector-ref a 0)))
    (check (not (runtime-error? (vector-set! a 4.0 :e-1))))
    (check (eq? :e-1 (vector-ref a 4)))))

