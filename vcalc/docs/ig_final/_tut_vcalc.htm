<!-- begin product section-->

<table><tr>
    <td>
      <table border="0" width="100%" cellspacing="0" cellpadding="0">
        <tr>
          <td valign="top">
            <table border="0" width="100%">
              <tr>
                <td width="100%"><a href="/vcalc.shtml" class="size5">vCalc
                  1.0 Tutorial<br>
                  </a></td>
              </tr>
              <tr>
                <td width="100%">
                  <img border="0" src="images/dl.gif" width="15" height="7"> 
                  <a href="/downloads/vcalc.exe">
                      Download Now
                  </a>&nbsp; 
                  <a href="tut_vcalc.shtml">Tutorial<br>
                  </a>
                  <p><b>Tutorial Sections:</b></p>
                  <p><b><a href="#sec10">1) Simple Arithmetic</a></b></p>
                  <p><b><a href="#sec20">2) Keyboard Commands</a></b></p>
                  <p><b><a href="#sec30">3) Memory Registers</a></b></p>
                  <p><b><a href="#sec40">4) vCalc Modes</a></b></p>
                  <p><b><a href="#sec50">5) Binary Math</a></b></p>
                  <p><b><a href="#sec60">6) Statistics</a></b></p>
                  <p><b><a href="#sec70">7) Regressions, Linear and Otherwise </a></b></p>
                  <p><b><a href="#sec80">8) Tips, Traps, and Miscellaneous Trivia</a></b></p>
		  </td></tr>
                  <tr><td>
                  <br><table width="100%" bgColor="#8c8c8c" border="0" cellpadding=0 cellspacing=0>
                      <tr>
                        <td>&nbsp;</td>
                      </tr>
                  </table>

<!-- begin info section ********************************************************** -->

<a name="sec10">
<h3>Simple Arithmetic:</h3>
<hr>

<p>
When vCalc starts up, it first displays its 2-part main window. The left half of the window is dedicated to the current RPN stack. The right half of the window displays a list of the currently available keyboard commands.
</p>

<img src="images\startup_screen.gif" width="569" height="500">

<p>
To enter a number onto the stack, typing any numeral on the keyboard will display an entry field on the bottom of the window. 
</p>

<img src="images\entry_field.gif" width="569" height="86">

<p>
This field can then be used to edit a number, which may then be entered onto the stack by pressing the enter key.
</p>

<img src="images\number_on_stack.gif"  width="569" height="500">

<p>
Entering in a second number will push the existing number upwards on to the stack.
</p>

<img src="images\2numbers_on_stack.gif" width="307" height="97">

<p>
At this point, any of the four basic arithmetic operators may be invoked by pressing the appropriate key. In all cases, the numbers being operated on are removed from the stack, and the result is placed onto the stack.
</p>

<img src="images\result_of_addition.gif" width="307" height="97">

<a name="sec20">
<h3>Keyboard Commands:</h3>
<hr>

<p>
Commands other than the basic four arithmetic operations are available as keyboard commands listed on the right side of the vCalc window. In general, the text in brackets describes the keys to be pressed to invoke the command listed on the right. As an example, entering [s] will take the square root of the top level of the RPN stack.
</p>

<img src="images\square_root.gif" width="307" height="97">

<p>
Some commands require combinations of keys to be pressed at the same time. Last Stack and Redo Stack are examples of this kind of command. Last stack is invoked by pressing [Control-Z]. It restores the state of the stack to the condition it was in prior to the last command. vCalc keeps track of the last 10 operations performed and allows them to be undone in reverse order using the Last Stack command.
</p>


<p>
vCalc also supports commands that are invoked by sequences of keystrokes. Commands listed with a chevron (<b>&gt;&gt;</b>) don't immediately perform any computation. Rather, they make a new set of keyboard commands available. 
</p>

<img src="images\math_chevrons.gif" width="307" height="97">

<p>
Pressing [m] changes the right hand display to reveal the new commands that are available. vCalc will show you what you've already typed at the top of the right half of the window. Pressing the escape key will always end the current key sequence without taking any action. One example of this is that the trignometric functions are all available as math commands.
</p>

<img src="images\math_subcommands.gif" width="297" height="307">

<a name="sec30">
<h3>Memory Registers:</h3>
<hr>

<p>
vCalc provides a collection of 100 storage registers numbered from 0 to 99.  The register commands allow values to be loaded from and stored into these registers. For example, to store the number on the top of the stack into register 12, enter the command 12 [enter] [r]<b>&gt;&gt;</b>[s]. To recall the value from the register, enter 12 [enter] [r]<b>&gt;&gt;</b>[r]. There are also commands to watch registers as they change. Entering 0 onto the stack, and pressing <r> <w> will watch the value in register 0.
</p>

<img src="images\register_watch.gif" width="307" height="97">

<p>
Storing a new value in register 0 by pressing 2 [enter] 0 [enter] [r]<b>&gt;&gt;</b>[s], will cause the register display at the top of the window to be updated accordingly.
</p>

<img src="images\register_watch_2.gif" width="307" height="97">

<a name="sec40">
<h3>vCalc Modes:</h3>

<p>
vCalc's operation can be somewhat controlled through the use of several mode settings. These allow adjustment of the angular units used by the trignometry functions, the display format for numbers, and the default number base for binary math.  One way to access these configuration settings is through the conventional Windows menu. Selecting File>>Options will display the options dialog box.
</p>

<img src="images\options_box.gif"  width="417" height="263">

<p>
As the settings are changed in the dialog box, the display of numbers in the vCalc window changes to correspond with the currently displayed setting. Clicking OK causes the new settings to be accepted. Clicking cancel returns the configuration settings to the state they were in prior to any alterations.
</p>

<p>
There are also a series of key sequences available to access these commands. These sequences all start with [Shift-M], for mode.  The sequences for setting fixed precision and scientific notation all require a number to be entered on the stack between 1 and 17. This number is the number of significant digits to be displayed.  If the calculator has been requested to display numbers beyond its level of precision, the digits will be displayed as question marks.
</p>

<img src="images\question_marks.gif"  width="579" height="233">

<p>
It is also worth mentioning that the keyboard command list can be hidden from the display with the "Toggle Keyboard Help" command, available through [f1]. This can be useful when the window is too narrow to accomodate long numbers.
</p>

<a name="sec50">
<h3>Binary Math</h3>
<hr>

<p>
In addition to conventional real numbers, vCalc also offers binary numbers. These numbers are displayed on the stack preceeded by a '#' and followed by either a 'd', 'o', or 'h' to indicate the numeric base (d for decimal, o for octal, and h for hexadecimal).
</p>

<img src="images\binary_numbers_dec.gif" width="579" height="67"><br>
<img src="images\binary_numbers_oct.gif" width="579" height="67"><br>
<img src="images\binary_numbers_hex.gif" width="579" height="67"><br>

<p>
To enter a binary number, pressing [#] will display an edit field that can be used to enter a binary number. The preceeding '#' character signals to vCalc that the number to be entered is a binary number. A trailing 'd', 'o', or 'h' can be used to specify that the numeric base is different from the current default. Otherwise, the number is interpreted according to the current default base. If there is an error parsing the number, vCalc will report a 'Syntax Error'.
</p>

<p>
Binary numbers in vCalc are 64-bit signed integers. This means that compared to the floating point numbers used in this tutorial to this point, vCalc binary numbers carry more digits of precision, can't be a fractional value, And are limited to a range of approximately -9.22x10^18 to 9.22x10^18 (in terms of floating point numbers). Negative binary numbers are displayed in decimal mode with a preceeding negative sign. In the octal and hexadecimal modes, they are displayed according to the two's complement convention. vCalc supports bitwise AND, OR, NOT, and XOR operations through the keys [&], [|], [~], and [^], respectively.
</p>

<a name="sec60">
<h3>Statistics:</h3>
<hr>

<p>
vCalc also offers a powerful set of statistical functions that may be used to calculate averages, standard deviations, covariances, correlation coefficients, and various types of regressions. The first step to any statistical calculation is to clear out the current dataset. The key sequence [d]<b>&gt;&gt;</b>[Shift-D] will create a new dataset and store it in register 99. All but a few of the statistics commands implicitly operate on the dataset in register 99, so there's a shorthand command that can be used to establish a watch on the current dataset: [d]<b>&gt;&gt;</b>[w].
</p>

<img src="images\blank_dataset.gif" width="307" height="97">

<p>
The dataset displayed above is an empty dataset. The text "n=0" indicates that there are no data points, and "?-Dataset" indicates that the current number of columns in the dataset is unknown. The first data point entered into the dataset defines the number of columns. vCalc currently supports datasets with one column or two columns. Each kind of dataset has a data entry command. [Control-Enter] will enter the top level of the stack into the x column of a 1 column dataset. [Control-Shift-Enter] will enter the top two levels of the stack into the x and y columns of a two column dataset. The number of columns in the dataset has a direct effect on the result of subsequent commands. For example, calculating the mean of a 2 column dataset will return two means, one for each column. The same computation on a 1 column dataset will only return one mean.
</p>

<p>
As an example, after loading the following five data points into vCalc ((1, 1), (2, 2), (3, 4), (5, 8), (6, 16)), the display will look like this.
</p>

<img src="images\sample_dataset.gif" width="307" height="97">

</p>
Calculating the mean with [d]&gt;&gt;[m] returns two means, the first for the x column, the second for the y. 
<p>

<img src="images\sample_means.gif" width="307" height="97">

<p>
The same thing is TRUE for the standard deviations calculated by [d]<b>&gt;&gt;</b>[s].
</p>

<img src="images\sample_sdevs.gif" width="307" height="97">

<p>
The "All Totals" command, [d]<b>&gt;&gt;</b>[Shift-T], is a little different. "All Totals", returns all the usual totals statistical calculators use to compute results. In order, this is what it returns:
<br><br>
<list>
<li>The number of data points
<li>The sum of all the x values
<li>The sum of squares of all the x values
<li>The sum of all the y values
<li>The sum of squares of all the y values
<li>The sum of all the x values multiplied by their corresponding y value.
</list>
</p>


<img src="images\sample_totals.gif" width="307" height="200">

<p>
Internally, vCalc does not usually use these sums for its statistical calculations. Calculations based on these sums alone aren't numerically stable under certain circumstances. To compensate for this, vCalc internally mean centers all of the data values before doing its statistical arithmetic.
</p>

<a name="sec70">
<h3>Regressions, Linear and Otherwise</h3>
<hr>

<p>
With a 2-column dataset, vCalc can compute a linear regression with the [d]<b>&gt;&gt;</b>[l] command. On our existing dataset, that yields:
</p>

<img src="images\sample_lr.gif" width="307" height="97">


<p>
From top to bottom, the first stack result is the slope of the fit line, the second stack result is the y-intercept. These results can be immediately reused by the "Predict X" and "Predict Y" commands ([d]<b>&gt;&gt;</b>[p]<b>&gt;&gt;</b>[x] and [d]<b>&gt;&gt;</b>[p]<b>&gt;&gt;</b>[y]). Entering a Y value and invoking "Predict X" will produce a predicted X value as the result. "Predict Y" works the same way to predict Y values from X values. Unlike virtually every other vCalc command, "Predict X" and "Predict Y" leave their first two arguments (the slope and intercept) on the stack. This is to make it easy to use them several times in a row without worrying about recomputing or storing your regression results. If the typical destructive behavior is desired, there are equivalent commands under [d]<b>&gt;&gt;</b>[p]<b>&gt;&gt;</b>[Shift-X] and [d]<b>&gt;&gt;</b>[p]<b>&gt;&gt;</b>[Shift-Y] that consume the slope and intercept.
</p>


<p>
There are also facilities for computation of non-linear regressions. To accomplish this, vCalc has commands that apply a Log operation to all the x's in a dataset or all the y's in a dataset. However, since these commands irrecoverably change the dataset they do not operate on the default dataset in register 99. They operate on the dataset on the first level of the stack. To retrieve the dataset to the stack, enter 99 [r]<b>&gt;&gt;</b>[r].
</p>

<img src="images\sample_on_stack.gif" width="307" height="97">

<p>
As an aside: As with any other vCalc object, datasets can be left on the stack or stored into another register as a backup.
</p>

<img src="images\double_sample_on_stack.gif" width="307" height="97">

<p>
 To consolidate multiple datasets into one overall dataset, they can also be added with the &lt;+&gt; key.
</p>

<img src="images\added_sample_on_stack.gif" width="307" height="97">

<p>
Back to the original dataset: since the current dataset is obviously exponential, it makes sense to apply a log operation to the y values with [d]<b>&gt;&gt;</b>[a]<b>&gt;&gt;</b>[y]. On the stack, the result of this operation looks like the same dataset, but in reality the stored values are quite different.
</p>

<img src="images\sample_on_stack.gif" width="307" height="97">

<p>
To run the regression, store it back into register 99 and rerun the linear regression.
</p>

<img src="images\sample_nlr.gif" width="307" height="97">


<p>
To confirm that this is the appropriate regression to run, the correlation coefficient can be calculated with [d]<b>&gt;&gt;</b>[c].
</p>

<img src="images\sample_nlr_corr.gif" width="307" height="97">


<p>
Since it's essentially 1.0 within the rounding error of the calculator, it's safe to say that this is the appropriate type of fit.
</p>

<a name="sec80">
<h3>Tips, Traps, and Miscellaneous trivia</h3>
<hr>

<list>
<li> There's no current facility in vCalc for editing datasets once they're already entered.However, in the event of an errant data point, vCalc does have a save facility that saves the current state of the calculator into a text file. This file may be edited in notepad to alter or remove data points.

<li> The vCalc stack is essentially unlimited in depth. This makes it relatively easy to keep lots of temporary values on the stack for future use. 

<li> A lot of the one-key commands vCalc provides are commands for rearranging the stack in various ways. The two most commonly used commands are "Swap" (assigned to <tab>) and "Drop" assigned to <backspace>. Swap swaps the top two stack levels and drop removes the top level from the stack. Stack commands can be more convenient than using register storage in certain circumstances.

<li> The undo command <control>-<z> is not literally an undo command. Rather what it does is to restore the last state of the stack. Any register or mode changes are not undone. There are ten levels to the undo operation. 

<li> Certain commands will report an "Invalid Type" error message. What this message means is that the command found the parameters it was looking for, but they weren't the wrong type. One way this might happen is if a number has been stored into register 99 when a data command is invoked. 

<li>vCalc can copy and paste using the clipboard. [Control-X] cuts and [Control-V] pastes. Not only is this is useful for moving numbers to and from other applications, it's also useful as a sort of short-term register.
</list>


<!-- end info section ********************************************************** -->

                </td>
              </tr>
              <tr>
                <td width="100%"></td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td width="100%" bgcolor="#CCCCCC">
      <table border="0" width="100%" cellspacing="0" cellpadding="0">
        <tr>
          <td width="100%" bgcolor="#FFFFFF">
            <table border="0" width="100%" cellspacing="0" cellpadding="0">
              <tr>
                <td width="10%" bgcolor="#FFFFCE">
                  <p align="center"><img border="0" src="images/proddiv.gif" width="1" height="10"></p>
                </td>
                <td width="50%" bgcolor="#FFFFEF"><img border="0" src="images/proddiv.gif" width="1" height="10"></td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<!-- end product section -->
